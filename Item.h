#pragma once

#include <string>
#include <vector>

#include "CreativeItemCategory.h"
#include "UseAnimation.h"
#include "json/value.h"

class TextureUVCoordinateSet;
class Block;
class ItemInstance;
class Level;
class Player;
class BlockSource;
class Container;
class Vec3;
class Mob;
class BlockID;
class IDataInput;
class IDataOutput;
class Entity;

class Item {
public:
	virtual ~Item();
	virtual void setIcon(const std::string&, int);
	virtual void setIcon(const TextureUVCoordinateSet&);
	virtual void setMaxStackSize(unsigned char);
	virtual void setCategory(CreativeItemCategory);
	virtual void setStackedByData(bool);
	virtual void setMaxDamage(int);
	virtual void setHandEquipped();
	virtual void setUseAnimation(UseAnimation);
	virtual void setMaxUseDuration(int);
	virtual void setRequiresWorldBuilder(bool);
	virtual void setExplodable(bool);
	virtual void setIsGlint(bool);
	virtual void setShouldDespawn(bool);
	virtual bool canBeDepleted();
	virtual bool canDestroySpecial(const Block*) const;
	virtual int getLevelDataForAuxValue(int) const;
	virtual bool isStackedByData() const;
	virtual int getMaxDamage();
	virtual int getAttackDamage();
	virtual bool isHandEquipped() const;
	virtual bool isArmor() const;
	virtual bool isDye() const;
	virtual bool isGlint(const ItemInstance*) const;
	virtual bool isThrowable() const;
	virtual bool canDestroyInCreative() const;
	virtual bool isLiquidClipItem(int) const;
	virtual bool requiresInteract() const;
	virtual void appendFormattedHovertext(const ItemInstance&, Level&, std::string&, bool) const;
	virtual bool isValidRepairItem(const ItemInstance&, const ItemInstance&);
	virtual int getEnchantSlot() const;
	virtual int getEnchantValue() const;
	virtual bool isComplex() const;
	virtual void uniqueAuxValues() const;
	virtual void getColor(const ItemInstance&) const;
	virtual bool use(ItemInstance&, Player&);
	virtual void useOn(ItemInstance*, Player*, int, int, int, signed char, float, float, float);
	virtual void dispense(BlockSource&, Container&, int, const Vec3&, signed char);
	virtual void useTimeDepleted(ItemInstance*, Level*, Player*);
	virtual void releaseUsing(ItemInstance*, Player*, int);
	virtual float getDestroySpeed(ItemInstance*, Block*);
	virtual void hurtEnemy(ItemInstance*, Mob*, Mob*);
	virtual void interactEnemy(ItemInstance*, Mob*, Player*);
	virtual void mineBlock(ItemInstance*, BlockID, int, int, int, Mob*);
	virtual void buildDescriptionName(const ItemInstance&) const;
	virtual void buildEffectDescriptionName(const ItemInstance&) const;
	virtual void readUserData(ItemInstance*, IDataInput&) const;
	virtual void writeUserData(const ItemInstance*, IDataOutput&) const;
	virtual unsigned char getMaxStackSize(const ItemInstance*);
	virtual void inventoryTick(ItemInstance&, Level&, Entity&, int, bool);
	virtual void onCraftedBy(ItemInstance&, Level&, Player&);
	virtual void getInteractText(const Player&) const;
	virtual int getAnimationFrameFor(Mob&) const;
	virtual bool isEmissive(int) const;
	virtual const TextureUVCoordinateSet& getIcon(int, int, bool) const;
	virtual int getIconYOffset() const;
	virtual bool isMirroredArt() const;
	
	Item(const std::string&, short);
	
	void init(Json::Value&);
	
	static void addBlockItems();
	static void addCreativeItem(Block*, short);
	static void addCreativeItem(Item*, short);
	static void addCreativeItem(const ItemInstance&);
	static void addCreativeItem(short, short);
	static TextureUVCoordinateSet getTextureUVCoordinateSet(const std::string&, int);
	static void initCreativeItems();
	static void initItems();
	static Item* lookupByName(const std::string&, bool);
	
	static std::vector<ItemInstance> mCreativeList;
	static Item* mItems[512];
	
	static Item* mApple;
	static Item* mApple_enchanted;
	static Item* mApple_gold;
	static Item* mArrow;
	static Item* mBed;
	static Item* mBeef_cooked;
	static Item* mBeef_raw;
	static Item* mBeetroot;
	static Item* mBeetrootSoup;
	static Item* mBlazePowder;
	static Item* mBlazeRod;
	static Item* mBoat;
	static Item* mBone;
	static Item* mBook;
	static Item* mBoots_chain;
	static Item* mBoots_cloth;
	static Item* mBoots_diamond;
	static Item* mBoots_gold;
	static Item* mBoots_iron;
	static Item* mBow;
	static Item* mBowl;
	static Item* mBread;
	static Item* mBrewing_stand;
	static Item* mBrick;
	static Item* mBucket;
	static Item* mCake;
	static Item* mCamera;
	static Item* mCarrot;
	static Item* mCarrotOnAStick;
	static Item* mCauldron;
	static Item* mChalkboard;
	static Item* mChestMinecart;
	static Item* mChestplate_chain;
	static Item* mChestplate_cloth;
	static Item* mChestplate_diamond;
	static Item* mChestplate_gold;
	static Item* mChestplate_iron;
	static Item* mChicken_cooked;
	static Item* mChicken_raw;
	static Item* mClay;
	static Item* mClock;
	static Item* mCoal;
	static Item* mComparator;
	static Item* mCompass;
	static Item* mCookie;
	static Item* mDiamond;
	static Item* mDiamondHorseArmor;
	static Item* mDoor_acacia;
	static Item* mDoor_birch;
	static Item* mDoor_darkoak;
	static Item* mDoor_iron;
	static Item* mDoor_jungle;
	static Item* mDoor_spruce;
	static Item* mDoor_wood;
	static Item* mDye_powder;
	static Item* mEgg;
	static Item* mEmerald;
	static Item* mEmptyMap;
	static Item* mEnchanted_book;
	static Item* mEnderpearlPotionItem;
	static Item* mFeather;
	static Item* mFermented_spider_eye;
	static Item* mFilledMap;
	static Item* mFireCharge;
	static Item* mFish_cooked_cod;
	static Item* mFish_cooked_salmon;
	static Item* mFish_raw_clowfish;
	static Item* mFish_raw_cod;
	static Item* mFish_raw_pufferfish;
	static Item* mFish_raw_salmon;
	static Item* mFishingRod;
	static Item* mFlint;
	static Item* mFlintAndSteel;
	static Item* mFlowerPot;
	static Item* mGhast_tear;
	static Item* mGlass_bottle;
	static Item* mGoldHorseArmor;
	static Item* mGoldIngot;
	static Item* mGold_nugget;
	static Item* mGoldenCarrot;
	static Item* mHatchet_diamond;
	static Item* mHatchet_gold;
	static Item* mHatchet_iron;
	static Item* mHatchet_stone;
	static Item* mHatchet_wood;
	static Item* mHelmet_chain;
	static Item* mHelmet_cloth;
	static Item* mHelmet_diamond;
	static Item* mHelmet_gold;
	static Item* mHelmet_iron;
	static Item* mHoe_diamond;
	static Item* mHoe_gold;
	static Item* mHoe_iron;
	static Item* mHoe_stone;
	static Item* mHoe_wood;
	static Item* mHopper;
	static Item* mHopperMinecart;
	static Item* mIronHorseArmor;
	static Item* mIronIngot;
	static Item* mItemFrame;
	static Item* mLead;
	static Item* mLeather;
	static Item* mLeatherHorseArmor;
	static Item* mLeggings_chain;
	static Item* mLeggings_cloth;
	static Item* mLeggings_diamond;
	static Item* mLeggings_gold;
	static Item* mLeggings_iron;
	static Item* mMagma_cream;
	static Item* mMelon;
	static Item* mMinecart;
	static Item* mMobPlacer;
	static Item* mMushroomStew;
	static Item* mMutton_cooked;
	static Item* mMutton_raw;
	static Item* mNameTag;
	static Item* mNetherQuartz;
	static Item* mNetherStar;
	static Item* mNether_wart;
	static Item* mNetherbrick;
	static Item* mPainting;
	static Item* mPaper;
	static Item* mPickAxe_diamond;
	static Item* mPickAxe_gold;
	static Item* mPickAxe_iron;
	static Item* mPickAxe_stone;
	static Item* mPickAxe_wood;
	static Item* mPoisonous_potato;
	static Item* mPorkChop_cooked;
	static Item* mPorkChop_raw;
	static Item* mPortfolioBook;
	static Item* mPotato;
	static Item* mPotatoBaked;
	static Item* mPotion;
	static Item* mPrismarineCrystals;
	static Item* mPrismarineShard;
	static Item* mPumpkinPie;
	static Item* mRabbitCooked;
	static Item* mRabbitFoot;
	static Item* mRabbitHide;
	static Item* mRabbitRaw;
	static Item* mRabbitStew;
	//static Random* mRandom;
	static Item* mRedStone;
	static Item* mReeds;
	static Item* mRepeater;
	static Item* mRotten_flesh;
	static Item* mSaddle;
	static Item* mSeeds_beetroot;
	static Item* mSeeds_melon;
	static Item* mSeeds_pumpkin;
	static Item* mSeeds_wheat;
	static Item* mShears;
	static Item* mShovel_diamond;
	static Item* mShovel_gold;
	static Item* mShovel_iron;
	static Item* mShovel_stone;
	static Item* mShovel_wood;
	static Item* mSign;
	static Item* mSkull;
	static Item* mSlimeBall;
	static Item* mSnowBall;
	static Item* mSpeckled_melon;
	static Item* mSpider_eye;
	static Item* mSplash_potion;
	static Item* mStick;
	static Item* mString;
	static Item* mSugar;
	static Item* mSulphur;
	static Item* mSword_diamond;
	static Item* mSword_gold;
	static Item* mSword_iron;
	static Item* mSword_stone;
	static Item* mSword_wood;
	static Item* mTNTMinecart;
	static Item* mWheat;
	static Item* mYellowDust;
};